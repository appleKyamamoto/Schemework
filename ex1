(define TREE '(1 (2 (3 4)) 6 (7 8 9)) )
(define TREE2 '(1 2((3 4) 5) (6 (7 8 9))) )

(define map-tree
  (lambda (fn ls)
    (cond ( (null? ls)
            '() )
          ( (pair? ls)
            (cons (map-tree fn (car ls)) (map-tree fn (cdr ls)) )
            )
          (else
           (fn ls) )
          )
    )
  )

(define map-tree2
  (lambda (fn ls)
    (if(pair? ls)
       (map (lambda (t)(map-tree2 fn t)) ls)
       (fn ls)
       )
    )
  )
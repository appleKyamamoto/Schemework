     1	(define ** expt)
     2	(define diff
     3	  (lambda (f)
     4	    (cond ( (number? f)
     5	            '0 )
     6	          ( (eqv? 'x f)
     7	            '1 )
     8	          ( (eqv? '+ (car f))
     9	            (cons '+ (map diff (cdr f))) )
    10	          ( (eqv? '- (car f))
    11	            (cons '- (map diff (cdr f))) )
    12	          ( (eqv? '* (car f))
    13	            `(+ (* ,(cadr f) ,(diff (caddr f)) ) (* ,(diff (cadr f)) ,(caddr f) )) )
    14	          ( (eqv? '** (car f))
    15	            `(* ,(caddr f) (* ,(diff (cadr f)) (** ,(cadr f) ,(- (caddr f) 1) ))) )
    16	          ( else '() )
    17	          )))
    18	
    19	(define tangent
    20	  (lambda (fx x)
    21	    (let ((fdx (diff fx) ))
    22	      (let ( (evd ((eval `(lambda (x) ,fdx) (interaction-environment)) x)) )
    23	      `(+ (* ,evd x ) ,(+ ((eval `(lambda (x) ,fx) (interaction-environment)) x) (* evd (- x))))
    24	        ))
    25	    ))
    26	
    27	(define diff2
    28	  (lambda (f d)
    29	    (let ((diffw (lambda (ft) (diff2 ft d))))
    30	      (cond ( (or (number? f) (and (eqv? 'x f) (eqv? 'y d)) (and (eqv? 'y f) (eqv? 'x d)))
    31	              '0 )
    32	            ( (or (and (eqv? 'x f) (eqv? 'x d)) (and (eqv? 'y f) (eqv? 'y d)))
    33	              '1 )
    34	            ( (eqv? '+ (car f ))
    35	              (cons '+ (map diffw (cdr f))) )
    36	            ( (eqv? '- (car f))
    37	              (cons '- (map diffw (cdr f))) )
    38	            ( (eqv? '* (car f))
    39	              `(+ (* ,(cadr f) ,(diffw (caddr f)) ) (* ,(diffw (cadr f)) ,(caddr f) )) )
    40	            ( (eqv? '** (car f))
    41	              `(* ,(caddr f) (* ,(diffw (cadr f)) (** ,(cadr f) ,(- (caddr f) 1) ))) )
    42	            ( else '() )
    43	            ))))
    44	
    45	(define simple+
    46	  (lambda (lst)
    47	    (let ( (nzl (nzlist (make-list lst))) )
    48	      (cond ( (null? nzl)
    49	              '0 )
    50	            ( (null? (cdr nzl))
    51	              (car nzl) )
    52	            (else (cons '+ nzl) )
    53	            ))
    54	  ))
    55	(define simple-
    56	  (lambda (lst)
    57	    (let ( (nzl (nzlist (make-list (cdr lst)))) )
    58	      (if (null? nzl)
    59	          (cadr lst)
    60	          (list '- (cadr lst) (car nzl))
    61	          )))
    62	  )
    63	(define simple*
    64	  (lambda (lst)
    65	    (let ( (p (car lst)) (q (cadr lst)) )
    66	      (cond ( (or (eqv? 0 p) (eqv? 0 q))
    67	              '0 )
    68	            ( (eqv? p 1)
    69	              q)
    70	            ( (eqv? q 1)
    71	              p)
    72	            (else (cons '* lst))
    73	            )))
    74	  )
    75	(define simple**
    76	  (lambda (lst)
    77	    (let ( (p (car lst)) (q (cadr lst)) )
    78	      (cond ( (eqv? q 0)
    79	              '1 )
    80	            ( (eqv? q 1)
    81	              p )
    82	            (else (cons '** lst))
    83	            )))
    84	  )
    85	
    86	(define make-list
    87	  (lambda (lst)
    88	    (cond ( (null? lst)
    89	            '() )
    90	          ( (eqv? 0 (car lst))
    91	            (cons '() (make-list (cdr lst))) )
    92	          (else (cons `(,(car lst)) (make-list (cdr lst))) )
    93	        )
    94	  ))
    95	(define nzlist
    96	  (lambda (lst)
    97	    (apply append lst)
    98	    ))
    99	(define simple
   100	  (lambda (lst)
   101	    (cond ( (or (number? lst) (symbol? lst)) 
   102	            lst )
   103	          ( (eqv? '+ (car lst))
   104	            (simple+ (map simple (cdr lst))) )
   105	          ( (eqv? '- (car lst))
   106	            (simple- (map simple (cdr lst))) )
   107	          ( (eqv? '* (car lst))
   108	            (simple* (map simple (cdr lst))) )
   109	          ( (eqv? '** (car lst))
   110	            (simple** (map simple (cdr lst))) )
   111	          (else '())
   112	          )))